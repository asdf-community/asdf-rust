#!/usr/bin/env bash

set -eo pipefail

fail() {
  echo -e "\e[31mFail:\e[m $*"
  exit 1
}

install_rust() {
  local install_type=$1
  local version=$2
  local install_path=$3

  if [ "$install_type" != "version" ]; then
    fail "asdf-rust supports release installs only"
  fi

  local configure_options="--prefix=$install_path"

  if [ -n "${RUST_WITHOUT}" ]; then
    configure_options+=" --without=${RUST_WITHOUT}"
  fi

  local platform

  case "$OSTYPE" in
    darwin*) platform="apple-darwin" ;;
    linux*) platform="unknown-linux-gnu" ;;
    openbsd*) platform="unknown-freebsd" ;;
    netbsd*) platform="unknown-netbsd" ;;
    *) fail "Unsupported platform" ;;
  esac

  local architecture

  case "$(uname -m)" in
    x86_64 | x86-64 | x64 | amd64) architecture="x86_64" ;;
    i386 | i486 | i686 | i786 | x86) architecture="i686" ;;
    aarch64 | arm64) architecture="aarch64" ;;
    xscale | armv6l | arm) architecture="arm" ;;
    armv7l | armv8l) architecture="armv7" ;;
    ppc64le) architecture="powerpc64le" ;;
    *) fail "Unsupported architecture" ;;
  esac

  local download_url="https://static.rust-lang.org/dist/rust-${version}-${architecture}-${platform}.tar.gz"
  local tmp_download_dir
  tmp_download_dir=$(mktemp -d -t rust_tmp_XXXXXX)
  local source_path="${tmp_download_dir}/rust.tar.gz"
  local distination_path="${tmp_download_dir}/dist"

  (
    echo "∗ Downloading..."
    curl --silent --location --create-dirs --output "$source_path" "$download_url" || fail "Could not download rust $version"
    mkdir -p "$distination_path"
    tar zxf "$source_path" -C "$distination_path" --strip-components=1 || fail "Could not uncompress"

    echo "∗ Installing..."
    cd "$distination_path"
    ./install.sh "$configure_options" || fail "Could not install"

    rm -rf "$tmp_download_dir"

    echo "The installation was successful!"
  ) || (
    rm -rf "$install_path"
    fail "An error occurred"
  )
}

install_default_rust_packages() {
  local packages_file="${ASDF_RUST_DEFAULT_PACKAGES_FILE:-$HOME/.default-rust-packages}"

  if [ -f "$packages_file" ]; then
    echo -ne "\nInstalling default rust packages..."
    while read -r package; do
      echo -ne "\nInstalling rust package $package..."
      echo "Pouet : $ASDF_INSTALL_PATH"
      PATH="$ASDF_INSTALL_PATH/bin:$PATH" cargo install -f --locked "$package" --root "$ASDF_INSTALL_PATH/.cargo"
    done <"$packages_file"
    for binary in "$ASDF_INSTALL_PATH/.cargo/bin"/*; do
      ln -s "$binary" "$ASDF_INSTALL_PATH/bin/$(basename "$binary")"
    done
  fi
}

install_rust "$ASDF_INSTALL_TYPE" "$ASDF_INSTALL_VERSION" "$ASDF_INSTALL_PATH"
install_default_rust_packages
